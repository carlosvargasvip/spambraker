version: '3'

services:

  exim:
    build:
      dockerfile: ./docker/exim/Dockerfile
      context: .
    volumes:
      # volume for store DKIM keys
      - ${DATA_PATH}/exim/etc/ssl/certs/dkim:/etc/ssl/certs/dkim
      # mails
      - ${DATA_PATH}/exim/var/spool:/var/spool
      - ${DATA_PATH}/exim/var/mail:/var/mail
    ports:
      - ${EXIM_PORT}:${EXIM_PORT}
    environment:
      - EXIM_DOMAIN=${EXIM_DOMAIN}
      - EXIM_PORT=${EXIM_PORT}
      - INCOMING_MAIL_MAX_SIZE_KILOBYTES=${INCOMING_MAIL_MAX_SIZE_KILOBYTES}
      - EXIM_MAIL_USER=${EXIM_MAIL_USER}
      - EXIM_MAIL_PASS=${EXIM_MAIL_PASS}
      - EXIM_DKIM_SELECTOR=${EXIM_DKIM_SELECTOR}
      - EXIM_MAX_PARALLEL=${EXIM_MAX_PARALLEL}
      - EXIM_DEBUG=${EXIM_DEBUG}
      - TZ=${TZ}
    restart: always
    hostname: ${EXIM_DOMAIN}
    # TODO для контейнеров - использовать DNS от docker, а для Exim - DNS контейнера dns, посмотреть как можно это сделать
#    dns: ${IP_DNS_RESOLVER}
    depends_on:
      - dns

  spamassassin:
    build:
      dockerfile: ./docker/spamassassin/Dockerfile
      context: .
    environment:
      - TZ=${TZ}
    depends_on:
      - dns

  mongo:
    image: mongo
    volumes:
      # DB
      - ${DATA_PATH}/mongo/data/db:/data/db
    depends_on:
      - dns

  dns:
    build:
      dockerfile: ./docker/dns/Dockerfile
      context: .
    environment:
      - DNS_CACHE_MIN_TTL=${DNS_CACHE_MIN_TTL}
      - DNS_CACHE_MAX_TTL=${DNS_CACHE_MAX_TTL}
      - DNS_CACHE_MAX_NEGATIVE_TTL=${DNS_CACHE_MAX_NEGATIVE_TTL}
      - DNS_DEBUG=${DNS_DEBUG}
      - DNS_STATISTICS_INTERVAL=${DNS_STATISTICS_INTERVAL}
      - DNS_LOG_QUERIES=${DNS_LOG_QUERIES}
      - DNS_LOG_REPLIES=${DNS_LOG_REPLIES}
      - DNS_LOG_SERVFAIL=${DNS_LOG_SERVFAIL}
      - TZ=${TZ}
    restart: always

  api:
    build:
      dockerfile: ./docker/api/Dockerfile
      context: .
      target: production
    volumes:
      # TODO собирать на этапе CI/CD
      # configs
      - ./config/dnsbl-domains.json:/srv/lib/Blacklist/dnsbl-domains.json
      - ${DATA_PATH}/api/etc/api:/etc/api
      # dev volumes for hot reload
      - ./api:/srv
    environment:
      - API_DOMAIN=${API_DOMAIN}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - API_PUBLIC_DNS=${API_PUBLIC_DNS}
      - API_AVAILABLE_TESTS=${API_AVAILABLE_TESTS}
      - API_CATCH_MTA_TO=${API_CATCH_MTA_TO}
      - API_REPLY_MTA_REPORT_TO=${API_REPLY_MTA_REPORT_TO}
      - API_WORKER_CHECK_ALL_CNT=${API_WORKER_CHECK_ALL_CNT}
      - INCOMING_MAIL_MAX_SIZE_KILOBYTES=${INCOMING_MAIL_MAX_SIZE_KILOBYTES}
      - API_MAX_MAIL_COUNT=${API_MAX_MAIL_COUNT}

      - EXIM_PORT=${EXIM_PORT}
      - EXIM_DOMAIN=${EXIM_DOMAIN}
      - EXIM_MAIL_USER=${EXIM_MAIL_USER}
      - EXIM_MAIL_PASS=${EXIM_MAIL_PASS}
      - EXIM_MAIL_FROM=${EXIM_MAIL_FROM}

      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}

      - TZ=${TZ}
    restart: always
    ports:
      - ${API_PORT}:80
    depends_on:
      - dns
      - mongo
      - exim
      - spamassassin
      - rabbitmq

  workspace:
    build:
      dockerfile: ./docker/api/Dockerfile
      context: .
      target: workspace
    hostname: workspace
    tty: true
    volumes:
      # configs
      - ./config/dnsbl-domains.json:/srv/lib/Blacklist/dnsbl-domains.json
      - ${DATA_PATH}/api/etc/api:/etc/api
      # volume for store DKIM keys
      - ${DATA_PATH}/exim/etc/ssl/certs/dkim:/etc/ssl/certs/dkim
      # dev volumes for hot reload
      - ./api:/srv
    # Passing all environment variables
    env_file:
      - .env

  rabbitmq:
    image: rabbitmq:management
    restart: always
    volumes:
      - ${DATA_PATH}/rabbitmq/var/lib/rabbitmq/mnesia:/var/lib/rabbitmq/mnesia
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}

